{"version":3,"sources":["assets/images/banner.svg","components/Counter.jsx","Views/Burn/components/SelectedImageHolder.jsx","assets/images/mask.jpg","utils/index.js","utils/abi/constants/chain.js","utils/abi/constants/addresses.js","Views/Burn/components/BurnSection.jsx","Views/Burn/Burn.jsx","assets/images/tree.png","Views/Burn/components/SuccesBurn.jsx","assets/images/banner.png","components/Header.jsx","Views/Home/Home.jsx","Views/MintPage/Success.jsx","config/config.js","Views/MintPage/Divider.jsx","Views/MintPage/PopupModal.jsx","Views/MintPage/MintPage.jsx","routes/routes.js","theme/theme.js","assets/images/logos/Galaxis.svg","assets/images/logos/CC.svg","components/Footer.jsx","App.jsx","index.js"],"names":["HOUR","MIN","DAY","INIT","d","h","m","s","sx","counterBoxHolder","display","justifyContent","gap","mt","mb","counterBox","flexDirection","alignItems","alignContent","counter","p","width","height","backgroundColor","CounterCircle","name","value","type","Typography","variant","Counter","date","handleCountingOver","simple","useState","values","setValues","useEffect","interval","setInterval","dif","getTime","Date","Math","floor","clearInterval","BP1","border","SupportedChainId","content","position","top","left","right","margin","title","subTitle","marginBottom","comeBackText","fontSize","lineHeight","toExperienceText","color","Home","useNavigate","className","style","Button","envConfig","my","maxWidth","maxHeight","DEPLOYED_NTW_NAME","DEPLOYED_CHAIN_ID","INFURA_ID","FORTMATIC_KEY","RPC_URL","ETHERSCAN_URL","OPENSEA_URL","PREVIEW_URL","AWS_URL","AGGREGATOR_URL","EC_TOKEN_ADDRESS","PHOENIX_CONTRACT_ADDRESS","CROSSMINT_CLIENT_ID","CROSSMINT_ENV","SALE_CONTRACT","TOKEN_CONTRACT","OPENSEA_COLLECTION","py","px","transition","root","titleDivider","mx","Divider","Box","defaultProps","routes","path","component","exact","COLORS","theme","createTheme","typography","pageTitle","textAlign","fontFamily","fontWeight","pageTitleDescription","textTransform","counterNumber","boxText","share","cursor","components","MuiButton","styleOverrides","grayButton","padding","borderRadius","orangeFilledButton","palette","primary","main","background","error","BP2","bottom","flexWrap","columnGap","rowGap","contentHolder","text","whiteSpace","opacity","Footer","src","CamelCodingLogo","alt","onClick","window","open","GalaxisLogo","minHeight","App","basename","map","element","delay","document","getElementById","render"],"mappings":"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","file":"static/js/main.98281a03.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/banner.1f050d53.svg\";","import { Typography } from '@mui/material';\r\nimport { Box } from '@mui/system'\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nconst BP1 = '@media (max-width: 600px)';\r\n\r\nconst MIN = 60000;\r\nconst HOUR = MIN * 60;\r\nconst DAY = HOUR * 24;\r\n\r\nconst INIT = { d: 0, h: 0, m: 0, s: 0 };\r\n\r\nconst sx = {\r\n    counterBoxHolder: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        gap: '35px',\r\n        mt: '20px',\r\n        mb: '40px'\r\n    },\r\n    counterBox: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: '7px',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        alignContent: 'center'\r\n    },\r\n    counter: {\r\n        p: ' 13px',\r\n        width: '37px',\r\n        height: '37px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignContent: 'center',\r\n        alignItems: 'center',\r\n        backgroundColor: '#594569',\r\n        [BP1]:{\r\n            p: ' 10px',\r\n            width: '25px',\r\n            height: '25px',\r\n        }\r\n    }\r\n}\r\n\r\nconst Counter = ({ date, handleCountingOver, simple }) => {\r\n    const [values, setValues] = useState(INIT)\r\n\r\n    useEffect(() => {\r\n\r\n        const interval = setInterval(() => {\r\n            if (date != null) {\r\n                let dif = date.getTime() - new Date().getTime();\r\n                if (dif > 0) {\r\n                    setValues({\r\n                        d: Math.floor(dif / DAY),\r\n                        h: Math.floor((dif % DAY) / HOUR),\r\n                        m: Math.floor((dif % HOUR) / MIN),\r\n                    });\r\n                } else {\r\n                    setValues(INIT);\r\n                    clearInterval(interval);\r\n                    handleCountingOver();\r\n                    // if (onFinish) {\r\n                    //     onFinish()\r\n                    // }\r\n                }\r\n            } else {\r\n                setValues(INIT);\r\n                clearInterval(interval);\r\n            }\r\n        }, 500);\r\n        return () => {\r\n            clearInterval(interval);\r\n        };\r\n    }, [date]);\r\n\r\n    return (\r\n        <>\r\n        {simple ? (\r\n          <>\r\n              {values.d} days, {values.h} hours, {values.m} mins\r\n          </>\r\n        ) : (\r\n          <Box sx={sx.counterBoxHolder}>\r\n            <CounterCircle name=\"DAYS\" value={values.d} />\r\n            <CounterCircle name=\"HOURS\" value={values.h} />\r\n            <CounterCircle name=\"MINS\" value={values.m} />\r\n          </Box>\r\n        )}\r\n      </>\r\n    );\r\n};\r\n\r\n\r\nconst CounterCircle = ({ name, value, type }) => (\r\n    <Box sx={sx.counterBox}>\r\n        <Typography variant='pageTitleDescription'>\r\n            {name}\r\n        </Typography>\r\n        <Box sx={sx.counter}>\r\n            <Typography variant='counterNumber'>{value}</Typography>\r\n        </Box>\r\n    </Box>\r\n);\r\n\r\nexport default Counter","import { Button, Typography } from '@mui/material'\r\nimport { Box } from '@mui/system'\r\nimport React from 'react'\r\n\r\nconst BP1 = '@media (max-width: 450px)';\r\nconst sx = {\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: '50px',\r\n    },\r\n    imgHolder: {\r\n        '& img':{\r\n            width: '379px',\r\n            height: '379px',\r\n        [BP1]:{\r\n            width: '250px',\r\n            height: '250px',\r\n        }\r\n        }\r\n    },\r\n    placeholder:{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        alignContent: 'center',\r\n        width: '377px',\r\n        height: '377px',\r\n        border: '1px solid #628BA0',\r\n        [BP1]:{\r\n            width: '250px',\r\n            height: '250px',\r\n        }\r\n    }\r\n}\r\nconst SelectedImageHolder = ({ selectedNft, handleBurn }) => {\r\n    return (\r\n        <Box sx={sx.root}>\r\n            {selectedNft ?\r\n                <Box sx={sx.imgHolder}>\r\n                    <img src={selectedNft.image} alt=\"\" />\r\n                </Box> :\r\n                <Box sx={sx.placeholder}>\r\n                    <Typography variant='boxText'>\r\n                        SELECT NFT TO BURN\r\n                    </Typography>\r\n                </Box>\r\n            }\r\n\r\n            <Button variant='grayButton' disabled={selectedNft ? false : true} onClick={handleBurn}>\r\n                BURN\r\n            </Button>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default SelectedImageHolder","export default __webpack_public_path__ + \"static/media/mask.2a9a7a9f.jpg\";","export { getContract } from \"./contract\"\r\n// export { zoomFetchTokenUris } from \"./zoom2\"\r\n\r\nexport const getTokenUri = async (tokenId, tokenUri) => {\r\n    //console.log(tokenUri)\r\n    const metadata = await fetch(tokenUri)// await fetch(`https://toddlerpillars-metadata-server.herokuapp.com/api/metadata/${tokenId % 100}/${tokenId}`)\r\n        .then((res) => res.json())\r\n        .catch((err) => console.error(err));\r\n    if (metadata) {\r\n        if (!metadata.tokenId) {\r\n            metadata.tokenId = tokenId;\r\n        }\r\n        if (!metadata.id) {\r\n            metadata.id = tokenId;\r\n        }\r\n        return metadata;\r\n    } else\r\n        // Fetching metadata fail, return an object anyway\r\n        return {\r\n            tokenId: tokenId,\r\n            id: tokenId\r\n        }\r\n};\r\n","export const SupportedChainId = {\r\n    MAINNET: 1,\r\n    RINKEBY: 4,\r\n    GOERLI:5,\r\n    POLYGON: 137\r\n}","import { SupportedChainId } from './chain'\r\n\r\nexport const ZOOM_2_ADDRESSES = {\r\n    [SupportedChainId.MAINNET]: \"0x7cdF091AF6a9ED75E3192500d3e5BB0f63e22Dea\",\r\n    [SupportedChainId.RINKEBY]: \"0x491592F30D9a3d1887F486eA2A3c72ad82fAcF4D\"\r\n}\r\n","import { Box, Typography } from '@mui/material'\r\nimport React, { useState } from 'react'\r\nimport NtfList from './NtfList'\r\nimport mask from '../../../assets/images/mask.jpg';\r\nimport SelectedImageHolder from './SelectedImageHolder';\r\nimport { zoomFetchTokenUris } from '../../../utils/zoom2'\r\nimport { useZoom2Contract } from '../../../hooks/useContract'\r\nimport { Contract } from 'ethers';\r\nimport useWeb3Ctx from '../../../hooks/useWeb3Ctx';\r\n\r\nconst BP1 = '@media (max-width: 1024px)';\r\n\r\nconst METADATA = [\r\n    {\r\n        id: 1,\r\n        image: mask\r\n    },\r\n    {\r\n        id: 1,\r\n        image: mask\r\n    },\r\n    {\r\n        id: 1,\r\n        image: mask\r\n    }\r\n]\r\nconst sx = {\r\n    root: {\r\n        position: 'relative',\r\n        top: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n        left: 0,\r\n        margin: 'auto',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    contentHolder: {\r\n        width: '90vw',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        '&:after': {\r\n            content: '\"\"',\r\n            width: '300px',\r\n            [BP1]: {\r\n                content: 'none'\r\n            }\r\n        },\r\n        [BP1]: {\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            gap: '25px'\r\n        }\r\n    },\r\n}\r\n\r\nconst BurnSection = ({handleSubmit, setStatusText}) => {\r\n    const { onboard, handleConnect, address, ethersProvider } = useWeb3Ctx();\r\n    const [selectedNft, setselectedNft] = useState(undefined);\r\n\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const selectMeta = (metadata) => {\r\n        setselectedNft(metadata)\r\n        setStatusText(\"NFT SELECTECT\")\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     if (address) {\r\n    //         let token;\r\n    //         if (config.TOKEN_CONTRACT) {\r\n    //             token = new Contract(config.TOKEN_CONTRACT, ABI.abi, ethersProvider);\r\n\r\n               \r\n    //             if (!token) {\r\n    //                 console.error('Token contract not found on address', tokenAddress);\r\n    //                 return;\r\n    //             }\r\n    //             getTokens(token);\r\n    //         }\r\n\r\n    //     }\r\n    // }, [address]);\r\n\r\n    // const getTokens = async (token) => {\r\n    //     setLoading(true);\r\n\r\n    //     const metas = await zoomFetchTokenUris(\r\n    //         token,\r\n    //         zoomContract,\r\n    //         address\r\n    //     );\r\n    //     console.log(metas)\r\n\r\n    //     if (metas) {\r\n    //         // console.log('TOKE META',metas);\r\n    //         setTokenMetas(metas);\r\n    //     } else {\r\n    //         setTokenMetas([]);\r\n    //     }\r\n    //     setLoading(false);\r\n    // };\r\n\r\n\r\n    return (\r\n        <Box sx={sx.root}>\r\n            <Box sx={sx.contentHolder}>\r\n                <NtfList metadatas={METADATA} selectMeta={selectMeta} />\r\n                <SelectedImageHolder selectedNft={selectedNft} handleBurn={handleSubmit} />\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default BurnSection","import { Button, Typography } from '@mui/material';\r\nimport { Box } from '@mui/system';\r\nimport { ethers } from 'ethers';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Banner from '../../components/Banner';\r\nimport useWeb3Ctx from '../../hooks/useWeb3Ctx';\r\nimport abi from '../../contracts/SaleContract.json';\r\nimport Counter from '../../components/Counter';\r\nimport BurnSection from './components/BurnSection';\r\nimport PendingBurn from './components/PendingBurn';\r\nimport SuccesBurn from './components/SuccesBurn';\r\nimport Header from '../../components/Header';\r\n\r\nconst BP1 = '@media (max-width: 450px)';\r\n\r\nconst sx = {\r\n    root: {\r\n        position: 'relative',\r\n        minHeight: '100vh',\r\n        height: '100%',\r\n        width: '100vw',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    headerHolder: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignContent: 'center'\r\n    },\r\n    title: {\r\n        mb: '20px',\r\n        [BP1]: {\r\n            mt: '0px !important'\r\n        }\r\n    },\r\n    subTitle: {\r\n        marginBottom: '100px',\r\n    },\r\n    bannerMintedPage: {\r\n        [BP1]: {\r\n            mt: 0\r\n        }\r\n    },\r\n    button: {\r\n        margin: '35% auto'\r\n    },\r\n    counterHolder: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignContent: 'center',\r\n        gap: '30px',\r\n    },\r\n    pending: {\r\n        margin: '0 auto'\r\n    }\r\n};\r\nconst DATE = new Date('2022-10-05T15:00:00.000Z');\r\nconst Burn = () => {\r\n    const { onboard, handleConnect, address, ethersProvider } = useWeb3Ctx();\r\n    const [buttonText, setButtonText] = useState('Connect Wallet');\r\n    const [activeTab, setActiveTab] = useState(0);\r\n    const [burnPending, setburnPending] = useState(false);\r\n    const [statusText, setStatusText] = useState(undefined);\r\n    const saleContract = new ethers.Contract(\r\n        '0x6DbD13D198944Bc49B983E146a9dF6bfA871CA13',\r\n        abi.abi,\r\n        ethersProvider\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (address && address !== null) {\r\n            setActiveTab(1);\r\n            setStatusText('NFT DETECTED')\r\n        } else {\r\n            setActiveTab(0);\r\n        }\r\n    }, [address]);\r\n\r\n\r\n    const signMessage = async (message) => {\r\n        try {\r\n            console.log(message)\r\n            if (!window.ethereum) {\r\n                throw new Error('No crypto wallet found');\r\n            }\r\n            await window.ethereum.send(\"eth_requestAccounts\");\r\n            const signer = ethersProvider.getSigner();\r\n            const signature = await signer.signMessage(message)\r\n            const address = await signer.getAddress();\r\n\r\n            return {\r\n                message, signature, address\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    const handleSubmit = (selectedNft) => {\r\n        setburnPending(true)\r\n        console.log(selectedNft);\r\n        setActiveTab(2);\r\n        // let dna = selectedNft;\r\n\r\n        // signMessage(`{tokenID: ${selectedNft.tokenId}},  reforged_dna: ${dna}`).then((response) => {\r\n        //     if (response) {\r\n        //         console.log(response);\r\n        //         let obj = {\r\n        //             \"address\": response.address,\r\n        //             // \"message\": {\r\n        //             //     \"tokenID\": ctx.card.tokenId,\r\n        //             //     \"reforged_dna\": dna\r\n        //             // },\r\n        //             \"message\": `{tokenID: ${ctx.card.tokenId}},  reforged_dna: ${dna}`,\r\n        //             \"signature\": response.signature\r\n        //         }\r\n        //         console.log(obj)\r\n        //         // postForge(obj).then(() => {\r\n        //         //     setForgePending(true)\r\n\r\n        //         // }).catch((e) => { console.log(e) })\r\n        //     }\r\n        // })\r\n    }\r\n    useEffect(() => {\r\n        let timer = null;\r\n        if (burnPending) {\r\n            timer = setInterval(() => {\r\n                // axios.get(`https://god-panels-metadata-staging.herokuapp.com/api/reforge/${ctx.card.tokenId}/status`)\r\n                //     .then((response) => {\r\n                //         if (response.data.reforgeStatus === 'completed') {\r\n                //             setOpenCongratulationModal(true);\r\n                //             setForgePending(false)\r\n                //         }\r\n                //     })\r\n                setActiveTab(3);\r\n                setStatusText(undefined)\r\n            }, 2000);\r\n        } else return;\r\n        return () => clearInterval(timer);\r\n    }, [burnPending])\r\n\r\n\r\n    return (\r\n        <Box className=\"center-div\">\r\n            <Box sx={sx.root} >\r\n                {/* <Box sx={sx.headerHolder}>\r\n                    <Banner style={sx.bannerMintedPage} />\r\n                    <Typography variant=\"pageTitle\" sx={{ ...sx.title }}>\r\n                        Braves Burn Event\r\n                    </Typography>\r\n                </Box> */}\r\n                <Header statusText={statusText}/>\r\n                {activeTab === 0 &&\r\n                    <>\r\n                        <Button variant='grayButton' onClick={handleConnect} sx={sx.button}>Connect Wallet</Button>\r\n                        <Box sx={sx.counterHolder}>\r\n                            <Typography variant=\"pageTitleDescription\">\r\n                                BURN YOUR MASK TO EXPEREINCE THE BETWIXT GAME\r\n                            </Typography>\r\n                            <Counter date={DATE} />\r\n                        </Box>\r\n                    </>\r\n                }\r\n                {activeTab === 1 &&\r\n                    <BurnSection handleSubmit={handleSubmit} setStatusText={setStatusText}/>\r\n                }\r\n                {activeTab === 2 && <PendingBurn />}\r\n                {activeTab === 3 && <SuccesBurn />}\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Burn","export default __webpack_public_path__ + \"static/media/tree.d4f24a01.png\";","import { Box, Button, Typography } from '@mui/material'\r\nimport React from 'react'\r\nimport treeImg from '../../../assets/images/tree.png'\r\n\r\nconst BP1 = '@media (max-width: 450px)';\r\n\r\nconst sx = {\r\n    root: {\r\n        position: 'relative',\r\n        top: 0,\r\n        left: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        margin: 'auto',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: '50px',\r\n    },\r\n    imgHolder: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        '& img': {\r\n            width: '379px',\r\n            height: '379px',\r\n\r\n            [BP1]: {\r\n                width: '250px',\r\n                height: '250px',\r\n            }\r\n        }\r\n    },\r\n}\r\nconst SuccesBurn = () => {\r\n    const handlePlay = () => {\r\n        window.open('https://google.com', '_blank')\r\n    }\r\n    const share = () => {\r\n        console.log('share')\r\n    }\r\n    return (\r\n        <Box sx={sx.root}>\r\n            <Box sx={sx.imgHolder}>\r\n                <img src={treeImg} alt='tree' />\r\n            </Box>\r\n            <Button variant='grayButton' onClick={handlePlay}>Play the game</Button>\r\n\r\n            <Typography variant=\"share\" onClick={share}>SHARE ON TWITTER</Typography>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default SuccesBurn","export default __webpack_public_path__ + \"static/media/banner.b35d4fd0.png\";","import { Box } from '@mui/system'\r\nimport React from 'react'\r\nimport banner from '../assets/images/banner.png'\r\nimport Typography from '@mui/material/Typography'\r\n\r\nconst BP1 = '@media (max-width: 450px)';\r\n\r\nconst sx = {\r\n    root: {\r\n        position: 'relative',\r\n        top: 0,\r\n        left: 0,\r\n        right: 0,\r\n        width: '100%',\r\n        margin: '0 auto',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignContent: 'center',\r\n        [BP1]:{\r\n            mb: '20px'\r\n        }\r\n    },\r\n    imgHolder: {\r\n        maxWidth: '570px',\r\n        margin: 'auto',\r\n        'img': {\r\n            width: '100%'\r\n        }\r\n    },\r\n    text: {\r\n        margin: 'auto',\r\n        m: '12px auto 0 auto'\r\n    }\r\n}\r\nconst Header = ({ statusText }) => {\r\n    return (\r\n        <Box sx={sx.root}>\r\n            <Box sx={sx.imgHolder}>\r\n                <img src={banner} alt=\"banner\" />\r\n            </Box>\r\n            <Typography variant=\"pageTitle\">Braves Burn Event</Typography>\r\n            {statusText && <Typography variant='pageTitleDescription' sx={sx.text}>\r\n                {statusText}\r\n            </Typography>}\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Header","import { Button, Typography } from '@mui/material'\r\nimport { Box } from '@mui/system'\r\nimport React, { useEffect } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport useWeb3Ctx from '../../hooks/useWeb3Ctx'\r\nimport Counter from '../../components/Counter'\r\nconst date = new Date('2022-10-17T15:00:00.000Z');\r\n\r\nconst BP1 = \"@media (max-width: 600px)\";\r\n\r\nconst sx = {\r\n  title: {\r\n    mb: '20px'\r\n  },\r\n  subTitle: {\r\n    marginBottom: '100px'\r\n  },\r\n  comeBackText: {\r\n    fontSize: '24px',\r\n    lineHeight: \"24px\",\r\n    mb: \"14px\",\r\n    mt:\"30px\",\r\n    [BP1]: {\r\n      fontSize: \"16px\",\r\n      lineHeight: \"20px\",\r\n    },\r\n  },\r\n  toExperienceText: {\r\n    fontSize: '14px', \r\n    color: '#594569'\r\n  }\r\n}\r\nconst Home = () => {\r\n  // const { onboard, handleConnect, address, ethersProvider } = useWeb3Ctx();\r\n  const navigate = useNavigate();\r\n\r\n  // const handleConnection = () => {\r\n  //   handleConnect();\r\n   \r\n  // }\r\n\r\n  // useEffect(() => {\r\n  //   if (address !== undefined && address !== null)\r\n  //   navigate('/mint');\r\n\r\n  // }, [address])\r\n  \r\n  // console.log(address)\r\n  return (\r\n    <Box className='center-div'>\r\n      <Typography variant='pageTitle' sx={sx.title}>Braves Free Mint</Typography>\r\n      <Typography variant='pageTitleDescription' sx={sx.subTitle} style={{color: '#594569'}}>BEGIN YOUR JOURNEY INTO BETWIXT</Typography>\r\n      <Button variant='grayButton'>Sold out</Button>\r\n      <Typography sx={sx.comeBackText} variant=\"pageTitleDescription\">\r\n                {\" \"}\r\n                COME BACK FOR THE BURN EVENT\r\n              </Typography>\r\n              <Typography variant=\"pageTitleDescription\" sx={sx.toExperienceText}>\r\n                {\" \"}\r\n                TO EXPEREINCE THE BETWIXT GAME\r\n              </Typography>\r\n              <Counter date={date} />{\" \"}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Home ","import { Button, Typography } from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\nimport React from \"react\";\r\nimport { toast } from \"react-toast\";\r\nimport Counter from \"../../components/Counter\";\r\n\r\nconst BP1 = \"@media (max-width: 600px)\";\r\n\r\nconst sx = {\r\n  root: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n  },\r\n  imageHolder: {\r\n    margin: \"auto\",\r\n    width: \"auto\",\r\n    my: \"27px\",\r\n    \"& img\": {\r\n      maxWidth: \"378px\",\r\n      maxHeight: \"378px\",\r\n      height: \"100%\",\r\n    },\r\n    [BP1]: {\r\n      \"& img\": {\r\n        maxWidth: \"280px\",\r\n        maxHeight: \"280px\",\r\n        height: \"100%\",\r\n      },\r\n    },\r\n  },\r\n  button: {\r\n    mb: \"50px\",\r\n  },\r\n  comeBackText: {\r\n    fontSize: '24px',\r\n    lineHeight: \"24px\",\r\n    mb: \"14px\",\r\n    [BP1]: {\r\n      fontSize: \"16px\",\r\n      lineHeight: \"20px\",\r\n    },\r\n  },\r\n  toExperienceText: {\r\n    fontSize: '14px', \r\n    color: '#594569'\r\n  }\r\n};\r\n\r\nconst Success = ({\r\n  image,\r\n  counterDate,\r\n  salesOver,\r\n  failed,\r\n  // handleOnclick,handleReveal\r\n}) => {\r\n  const shareOnTwitter = () => {\r\n    window.open(\"https://twitter.com/intent/tweet?text=I've%20just%20minted%20a%20Betwixt%20Brave!%20Mint%20yours%20braves.betwixt.life%20@BetwixtNFT\")\r\n  };\r\n  return (\r\n    <Box sx={sx.root}>\r\n      {!salesOver ? (\r\n        <>\r\n          {!failed ? (\r\n            <>\r\n              <Typography variant=\"pageTitleDescription\" color=\"#62A077\">\r\n                Success\r\n              </Typography>\r\n              <Box sx={sx.imageHolder}>\r\n                <img src={image} alt=\"mask\" />\r\n              </Box>\r\n              <Button\r\n                sx={sx.button}\r\n                variant=\"grayButton\"\r\n                onClick={shareOnTwitter}\r\n              >\r\n                Share on Twitter\r\n              </Button>\r\n              {/* <Button sx={sx.button} variant='grayButton' onClick={handleReveal}>{buttonText}</Button> */}\r\n              <Typography sx={sx.comeBackText} variant=\"pageTitleDescription\">\r\n                {\" \"}\r\n                COME BACK FOR THE BURN EVENT\r\n              </Typography>\r\n              <Typography variant=\"pageTitleDescription\" sx={sx.toExperienceText}>\r\n                {\" \"}\r\n                TO EXPEREINCE THE BETWIXT GAME\r\n              </Typography>\r\n              <Counter date={counterDate} />{\" \"}\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Typography variant=\"pageTitleDescription\" color=\"#7f2020\">\r\n                Failed\r\n              </Typography>\r\n              <Box sx={sx.imageHolder}>\r\n                <img src={image} alt=\"mask\" />\r\n              </Box>\r\n              <Typography sx={sx.comeBackText} variant=\"pageTitleDescription\">\r\n                {\" \"}\r\n                COME BACK FOR THE BURN EVENT\r\n              </Typography>\r\n              <Typography variant=\"pageTitleDescription\" sx={sx.toExperienceText}>\r\n                {\" \"}\r\n                TO EXPEREINCE THE BETWIXT GAME\r\n              </Typography>\r\n              <Counter date={counterDate} />{\" \"}\r\n            </>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <>\r\n          <Typography\r\n            variant=\"pageTitleDescription\"\r\n            style={{ marginBottom: \"50px\", fontSize: \"18px\" }}\r\n          >\r\n            SALE ENDED\r\n          </Typography>\r\n          <Typography sx={sx.comeBackText} variant=\"pageTitleDescription\">\r\n            {\" \"}\r\n            COME BACK FOR THE BURN EVENT\r\n          </Typography>\r\n          <Typography variant=\"pageTitleDescription\" sx={sx.toExperienceText}>\r\n            {\" \"}\r\n            TO EXPEREINCE THE BETWIXT GAME\r\n          </Typography>\r\n          <Counter date={counterDate} />{\" \"}\r\n        </>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Success;\r\n","const dev = {\r\n    DEPLOYED_NTW_NAME: 'goerli',\r\n    DEPLOYED_CHAIN_ID: 5,\r\n    INFURA_ID: 'cae2aed2f50a4087af91b000cf05be4c',\r\n    FORTMATIC_KEY: 'pk_test_DD2BBA8AAA1D4FED',\r\n    RPC_URL: 'https://goerli.infura.io/v3/cae2aed2f50a4087af91b000cf05be4c',\r\n    ETHERSCAN_URL: 'https://goerli.etherscan.io/',\r\n    OPENSEA_URL: 'https://testnets.opensea.io/',\r\n    API_URL: 'https://god-panels-metadata-staging.herokuapp.com/api',\r\n    PREVIEW_URL: 'https://ssp-server-v2.herokuapp.com/api/project-session',\r\n    AWS_URL:\r\n      'https://galaxis-backend-staging.s3.eu-central-1.amazonaws.com/media',\r\n  \r\n    AGGREGATOR_URL: 'https://nft-aggregator-rinkeby.herokuapp.com/token',\r\n    \r\n    CROSSMINT_CLIENT_ID: '7de2bbab-cec3-456b-a2e1-96bbd99cb8ad',\r\n    CROSSMINT_ENV: 'staging',\r\n    SALE_CONTRACT: '0xA2c765F97b76c339CD551FB32621b319A430e8f8',\r\n    TOKEN_CONTRACT: '0xc371de84f23e87804e9bdfc89f1f3dab146add0f'\r\n  };\r\n  \r\n  const prod = {\r\n    DEPLOYED_NTW_NAME: 'mainnet',\r\n    DEPLOYED_CHAIN_ID: 1,\r\n    INFURA_ID: 'a5e79e6ee9a14236b385e47849805596',\r\n    FORTMATIC_KEY: 'pk_live_FBFF1F05F2879F29',\r\n    RPC_URL: 'https://morning-dawn-night.quiknode.pro/11200b9a0f021eb0e380b0f273424505379b271d/',\r\n    ETHERSCAN_URL: 'https://etherscan.io/',\r\n    OPENSEA_URL: 'https://opensea.io/',\r\n  \r\n    // API_URL: 'https://galaxis-backend.herokuapp.com',\r\n    PREVIEW_URL: 'https://launchpad-backend.herokuapp.com/api/project-session',\r\n    AWS_URL: 'https://galaxis-web.s3.amazonaws.com/media',\r\n  \r\n    AGGREGATOR_URL: 'https://nft-aggregator.herokuapp.com/token',\r\n  \r\n    EC_TOKEN_ADDRESS: '0x97ca7fe0b0288f5eb85f386fed876618fb9b8ab8',\r\n    PHOENIX_CONTRACT_ADDRESS: '0x55B3154Ad761405B0cdd27355943Eb808d40b5A1',\r\n\r\n    CROSSMINT_CLIENT_ID: 'b3f5189b-66fe-43d7-8295-c73f9fa3e3ef',\r\n    CROSSMINT_ENV: '',\r\n    SALE_CONTRACT: '0x730d2d827FE32073b8ca5bdA74a921E4492EeFEB',\r\n    TOKEN_CONTRACT: '0x2a3Bc72ed71DB2a27Cfe2Ba50aEcC692Fb04FcfF'\r\n  \r\n  };\r\n  \r\n  const common = {\r\n    OPENSEA_COLLECTION: 'https://api.opensea.io/api/v1/collection',\r\n  };\r\n  \r\n  // if use npm/yarn start,  NODE_ENV = \"development\"\r\n  // if use npm/yarn build,  NODE_ENV = \"production\"\r\n  let envConfig = prod; // process.env.NODE_ENV === \"development\" ? dev : prod\r\n  let config = { ...envConfig, ...common };\r\n  \r\n  export default config;\r\n  ","import React from \"react\";\r\nimport { Box } from \"@mui/material\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst sx = {\r\n  root: {\r\n    width: \"100%\",\r\n    height: \"2px\",\r\n    backgroundColor: \"#FF692B\",\r\n  },\r\n  titleDivider: {\r\n    mt: \"16px\",\r\n    maxWidth: \"100px\",\r\n    height: \"6px\",\r\n    mx: \"auto\",\r\n  },\r\n};\r\n\r\nconst Divider = ({ titleDivider, style }) => (\r\n  <Box\r\n    sx={{ ...sx.root, ...(titleDivider ? sx.titleDivider : {}), ...style }}\r\n  />\r\n);\r\n\r\n/* eslint-disable react/forbid-prop-types */\r\nDivider.propTypes = {\r\n  titleDivider: PropTypes.bool,\r\n  style: PropTypes.any,\r\n};\r\n\r\nDivider.defaultProps = {\r\n  titleDivider: false,\r\n  style: {},\r\n};\r\n\r\nexport default Divider;\r\n","import React from 'react';\r\n\r\nimport { Box, Modal, Typography } from '@mui/material';\r\n\r\nconst BP1 = '@media (max-width: 899px)';\r\nconst BP2 = '@media (max-width: 719px)';\r\nconst BP3 = '@media (max-width: 600px)';\r\n\r\nconst sx = {\r\n  root: {\r\n    height: '100%',\r\n    backgroundColor: '#15101999',\r\n    py: '44px',\r\n    px: '125px',\r\n    position: 'relative',\r\n    display: 'flex',\r\n    // pointerEvents: \"none\",\r\n    transition: 'all .3s',\r\n    [BP1]: {\r\n      px: '85px',\r\n    },\r\n    [BP2]: {\r\n      px: '25px',\r\n    },\r\n  },\r\n  container: {\r\n    maxHeight: '80vh',\r\n    minHeight: '150px',\r\n    position: 'relative',\r\n    margin: 'auto',\r\n    width: '100%',\r\n    maxWidth: '500px',\r\n    borderRadius: '16px',\r\n    border: '1px solid #628BA0',\r\n    overflow: 'hidden',\r\n    transition: 'all .3s',\r\n    backgroundColor: '#1E1E1E',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    boxSizing: 'border-box',\r\n    px: '30px',\r\n    py: '20px',\r\n    textAlign: 'center',\r\n  },\r\n  img: {\r\n    height: '100%',\r\n    width: '100%',\r\n    objectFit: 'contain',\r\n  },\r\n  closeBtn: {\r\n    position: 'absolute',\r\n    width: '14px',\r\n    height: '14px',\r\n    top: '38%',\r\n    bottom: '0',\r\n    right: '5px',\r\n    cursor: 'pointer',\r\n    pointerEvents: 'auto',\r\n    transition: 'all .3s',\r\n    color: '#FFF',\r\n    '&:hover': {\r\n      opacity: 0.8,\r\n    },\r\n  },\r\n  header: {\r\n    fontFamily: 'poppins-semibold',\r\n    position: 'relative',\r\n    width: '100%',\r\n    minHeight: '50px',\r\n    color: '#FF692B',\r\n  },\r\n  body: {\r\n    width: '100%',\r\n    minHeight: '50px',\r\n    fontFamily: 'Jotia',\r\n    fontSize: '16px',\r\n  },\r\n  footer: {\r\n    width: '100%',\r\n    minHeight: '10px',\r\n  },\r\n};\r\n\r\nconst PopupModal = ({\r\n  isOpen,\r\n  setOpen,\r\n  header,\r\n  footer,\r\n  children,\r\n  isTxPopup,\r\n}) => {\r\n  return (\r\n    <Modal\r\n      open={isOpen}\r\n      onClose={(event, reason) => {\r\n        if (reason !== 'backdropClick') {\r\n          if (setOpen) {\r\n            setOpen(false);\r\n          }\r\n        }\r\n      }}\r\n    >\r\n      <Box sx={sx.root}>\r\n        <Box sx={sx.container}>\r\n          <Box sx={sx.header}>\r\n            {!isTxPopup && (\r\n              <Box sx={sx.closeBtn} onClick={() => setOpen && setOpen(false)}>\r\n                {/* <img src={close} style={{ width: '100%' }} alt=\"Close\" /> */}\r\n                x\r\n              </Box>\r\n            )}\r\n\r\n            <Typography variant='counterNumber'>{header}</Typography>\r\n          </Box>\r\n          <Box sx={sx.body}>{children}</Box>\r\n          <Box sx={sx.footer}>{footer}</Box>\r\n        </Box>\r\n      </Box>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default PopupModal;\r\n","import { Button, Typography } from '@mui/material';\r\nimport { Box } from '@mui/system';\r\nimport { ethers } from 'ethers';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Banner from '../../components/Banner';\r\nimport useWeb3Ctx from '../../hooks/useWeb3Ctx';\r\nimport Success from './Success';\r\nimport maskImage from '../../assets/images/mask.jpg';\r\nimport saleAbi from '../../contracts/SaleContract.json';\r\nimport tokenAbi from '../../contracts/TokenContract.json';\r\nimport config from '../../config/config';\r\nimport Counter from '../../components/Counter';\r\nimport { toast } from 'react-toast';\r\nimport whitelist from '../../whitelist/whitelist.json';\r\nimport CheckoutModal from './CheckoutModal';\r\nimport TxProgressModal from './TxProgressModal';\r\nconst date = new Date('2022-10-17T15:00:00.000Z');\r\n\r\nconst BP1 = '@media (max-width: 450px)';\r\n\r\nconst sx = {\r\n  root: {},\r\n\r\n  title: {\r\n    mb: '20px',\r\n    [BP1]: {\r\n      mt: '0px !important',\r\n    },\r\n  },\r\n  subTitle: {\r\n    marginBottom: '30px',\r\n    fontSize: '24px',\r\n  },\r\n  bannerMintedPage: {\r\n    // mt: '-45px',\r\n    [BP1]: {\r\n      mt: 0,\r\n    },\r\n  },\r\n  pubMintHolder: {\r\n    dispaly: 'flex',\r\n    mb: '40px',\r\n    gap: '10px'\r\n  }\r\n};\r\n\r\nconst MintPage = () => {\r\n  const { onboard, handleConnect, address, ethersProvider } = useWeb3Ctx();\r\n  const [buttonText, setButtonText] = useState('Connect Wallet');\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const [userAlreadyMinted, setUserAlreadyMinted] = useState(false);\r\n  const saleContract = new ethers.Contract(\r\n    config.SALE_CONTRACT,\r\n    saleAbi.abi,\r\n    ethersProvider\r\n  );\r\n  const tokenContract = new ethers.Contract(\r\n    config.TOKEN_CONTRACT,\r\n    tokenAbi.abi,\r\n    ethersProvider\r\n  );\r\n  const [minted, setMinted] = useState(0);\r\n  const [totalAmount, setTotalAmount] = useState(0);\r\n  const [salePrice, setSalePrice] = useState(0);\r\n  const [discountPrice, setDiscountPrice] = useState(0);\r\n\r\n  //sale states needed a different approach, because the sales can overlap each other :/\r\n\r\n  const [preSaleStarted, setPreSaleStarted] = useState(false);\r\n  const [preSaleFinished, setPreSaleFinished] = useState(false);\r\n\r\n  const [mainSaleStarted, setMainSaleStarted] = useState(false);\r\n  const [mainSaleFinished, setMainSaleFinished] = useState(false);\r\n\r\n  const [presaleStartTime, setPresaleStartTime] = useState(null);\r\n  const [saleStartTime, setSaleStartTime] = useState(null);\r\n  const [presaleEndTime, setPresaleEndTime] = useState(null);\r\n  const [saleEndTime, setSaleEndTime] = useState(null);\r\n\r\n  const [presaleTimeCounter, setPresaleTimeCounter] = useState(null);\r\n  const [saleTimeCounter, setSaleTimeCounter] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const [txEtherScan, setTxEtherScan] = useState('');\r\n  const [showCheckout, setShowCheckout] = useState(false);\r\n  const [showErrorPopup, setShowErrorPopup] = useState(false);\r\n  const [txInProgress, setTxInProgress] = useState(false);\r\n  const [approveInProgress, setApproveInProgress] = useState(false);\r\n  const [checkoutIsPresale, setCheckoutIsPresale] = useState(true);\r\n  const [isCreditCard, setIsCreditCard] = useState(false);\r\n  const [signature, setSignature] = useState(null);\r\n  const [maxTokenPerAddress, setMaxTokenPerAddress] = useState(10);\r\n\r\n  const [maxDiscountMintable, setMaxDiscountMintable] = useState(10);\r\n  const [maxMintableDuringMainSale, setMaxMintableDuringMainSale] =\r\n    useState(10);\r\n  const [userMaxDiscountMintable, setUserMaxDiscountMintable] = useState(0);\r\n  const [maxMintPerTransaction, setMaxMintPerTransaction] = useState(1);\r\n  const [refreshInterval, setRefreshInterval] = useState(null);\r\n  const [counintingOver,setCountingOver]= useState(0);\r\n  const [signatures, setSignatures] = useState(null);\r\n\r\n  useEffect(() => {\r\n    console.log('address: ', address);\r\n    if (address && address !== null) {\r\n      setButtonText('MINT');\r\n      setActiveTab(1);\r\n    } else {\r\n      setButtonText('Connect Wallet');\r\n      setActiveTab(0);\r\n    }\r\n  }, [address]);\r\n  useEffect(() => {\r\n    if (address === null) return;\r\n    (async () => {\r\n      const alreadyMintedByWallet = await saleContract\r\n        ._mintedByWallet(address)\r\n        .catch((e) => console.log);\r\n      if (alreadyMintedByWallet.toNumber() > 0) {\r\n        setUserAlreadyMinted(true);\r\n      }\r\n      console.log(alreadyMintedByWallet, ' setUserAlreadyMinted');\r\n    })();\r\n  }, []);\r\n\r\n  const handleOnClick = () => {\r\n    switch (activeTab) {\r\n      case 0:\r\n        handleConnect();\r\n        break;\r\n      case 1:\r\n        if (preSaleStarted) {\r\n          handleDiscountMint();\r\n        }\r\n        if (mainSaleStarted) {\r\n          handleMint();\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n  const handleGoToWallet = () => {\r\n    setActiveTab(2);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // console.log(ethersProviderVar, \" ethersProviderVar\")\r\n    if (address === null) return;\r\n    (async () => {\r\n      const balanceOf = await tokenContract\r\n        .balanceOf(address)\r\n        .catch((e) => toast.error(e.message));\r\n      console.log(balanceOf.toNumber(), ' balance');\r\n      if (balanceOf < 1) return;\r\n      const token = await tokenContract\r\n        .tokenOfOwnerByIndex(address, 0)\r\n        .catch((e) => {\r\n          toast.error(e.message);\r\n        });\r\n      if (token) {\r\n        console.log(token, ' token');\r\n      }\r\n      // const minted = await getMintedByWallet();\r\n      // console.log(minted, ' minted by wallet');\r\n      // const presaleStart = await checkPresaleActive();\r\n      // console.log(\"presale is active \", presaleStart)\r\n      // const signer = saleContract.connect(ethersProvider.getSigner());\r\n      // console.log(signer, \" signer\")\r\n      // const presaleIn5 = await setPresaleIn(signer);\r\n      // console.log(presaleIn5, \" presaleIn5\")\r\n    })();\r\n  }, [activeTab]);\r\n\r\n  useEffect(() => {\r\n    // console.log(ethersProviderVar, \" ethersProviderVar\")\r\n    (async () => {\r\n      const saleInfo = await getSaleInfo().then((response) => {\r\n        console.log(response);\r\n      });\r\n\r\n      // const minted = await getMintedByWallet();\r\n      // console.log(minted, ' minted by wallet');\r\n      // const presaleStart = await checkPresaleActive();\r\n      // console.log(\"presale is active \", presaleStart)\r\n      // const signer = saleContract.connect(ethersProvider.getSigner());\r\n      // console.log(signer, \" signer\")\r\n      // const presaleIn5 = await setPresaleIn(signer);\r\n      // console.log(presaleIn5, \" presaleIn5\")\r\n    })();\r\n  }, [counintingOver]);\r\n\r\n  const getUserParams = () => {\r\n    let up = null;\r\n    if (address) {\r\n      //console.log('SIGNATURES-------',signatures);\r\n\r\n      const key = Object.keys(whitelist).find(\r\n        (key) => key.toLowerCase() == address.toLowerCase()\r\n      );\r\n      //console.log('USER KEY', key);\r\n      if (key) {\r\n        // const userParams = whitelist[key].paramObj;\r\n        const userParamsRaw = whitelist[key].params;\r\n\r\n        // up = {\r\n        //   params: {\r\n        //     max_mint: userParams[3],\r\n        //     receiver: userParams[4],\r\n        //     valid_from: userParams[5],\r\n        //     valid_to: userParams[6],\r\n        //     eth_price: userParams[7],\r\n        //   },\r\n        //   raw_params: userParams,\r\n        //   signature: whitelist[key].signature,\r\n        // };\r\n        up = {\r\n          params: {\r\n            max_mint: userParamsRaw[3],\r\n            receiver: userParamsRaw[4],\r\n            valid_from: userParamsRaw[5],\r\n            valid_to: userParamsRaw[6],\r\n            eth_price: userParamsRaw[7],\r\n          },\r\n          raw_params: userParamsRaw,\r\n          signature: whitelist[key].signature,\r\n        };\r\n        // console.log(up, \" up\")\r\n      }\r\n    }\r\n    return up;\r\n  };\r\n  const getSaleInfo = async () => {\r\n    //console.log('saleInfo',saleContract);\r\n    setIsLoading(true);\r\n    const info = await saleContract\r\n      .tellEverything()\r\n      .catch((e) => console.log('err:', e));\r\n    console.log('****info', info);\r\n\r\n    \r\n    \r\n    const totalSupply = await tokenContract.totalSupply();\r\n    //console.log('TS',totalSupply);\r\n\r\n    // let time = 1665648120;\r\n    const presaleStart = Number(info.config.presaleStart);\r\n    // const presaleStart = Number(info.config.presaleStart);\r\n    const presaleEnd = Number(info.config.presaleEnd);\r\n    \r\n    const saleStart = Number(info.config.saleStart);\r\n    const saleEnd = Number(info.config.saleEnd);\r\n\r\n    const fullPrice = info.config.fullPrice;\r\n\r\n    /* const maxTokens = Number(info.maxTokens);\r\n    const userMinted = Number(info.userMinted);\r\n\r\n    const presaleIsActive = info.presaleIsActive;\r\n    const saleIsActive = info.saleIsActive; */\r\n\r\n    setMaxDiscountMintable(Number(info.config.maxPresalePerAddress));\r\n    setMaxTokenPerAddress(Number(info.config.maxSalePerAddress));\r\n\r\n    setMaxMintPerTransaction(Number(info.config.maxMintPerTransaction));\r\n\r\n    //\tlet reserved = info.maxTokens.sub(info.MaxUserMintable);\r\n    //\tsetMinted(Number(info.userMinted.add(reserved)));\r\n    setMinted(Number(totalSupply));\r\n    //setTotalAmount(Number(info.config.MaxUserMintable?info.config.MaxUserMintable:info._MaxUserMintable)); //maxTokens\r\n\r\n    let now = Date.parse(new Date()) / 1000;\r\n    let now2 = Date.parse(new Date()) / 1000;\r\n    //let now = Number(await saleContract.getBlockTimestamp());\r\n\r\n    /* console.log('current time', now2)\r\n        console.log('block time', now)\r\n        console.log('presale start time', presaleStart)\r\n        \r\n        console.log('presale end time', presaleEnd)\r\n        console.log('sale start time', saleStart)\r\n        console.log('sale end time', saleEnd) */\r\n    console.log(saleStart, ' presale end');\r\n    let presaleIsOver = presaleEnd - now <= 0;\r\n    let saleIsOver = saleEnd - now <= 0;\r\n    let saleIsOn = now >= saleStart && !saleIsOver;\r\n    let presaleIsOn = now >= presaleStart && !presaleIsOver;\r\n    // let presaleIsOver = saleEnd - now <= 0;\r\n    // let saleIsOver = saleStart - now <= 0;\r\n    // let saleIsOn = now >= presaleStart && !saleIsOver;\r\n    // let presaleIsOn = now >= presaleEnd && !presaleIsOver;\r\n\r\n    //\tlet _discountPrice = 0;\r\n    let _discountPrice = ethers.BigNumber.from('50000000000000000');\r\n\r\n    setDiscountPrice(ethers.utils.formatEther(_discountPrice));\r\n    setSalePrice(ethers.utils.formatEther(fullPrice));\r\n\r\n    setPreSaleStarted(presaleIsOn);\r\n    setPreSaleFinished(presaleIsOver);\r\n    /* \r\n    setPreSaleStarted(true);\r\n    setPreSaleFinished(true); */\r\n\r\n    setMainSaleStarted(saleIsOn);\r\n    setMainSaleFinished(saleIsOver);\r\n\r\n    setPresaleStartTime(new Date(presaleStart * 1000));\r\n    setPresaleEndTime(new Date(presaleEnd * 1000));\r\n    setSaleStartTime(new Date(saleStart * 1000));\r\n    setSaleEndTime(new Date(saleEnd * 1000));\r\n\r\n    if (!presaleIsOn && !presaleIsOver) {\r\n      setPresaleTimeCounter(new Date(presaleStart * 1000));\r\n    } else {\r\n      //console.log('presale over, or on');\r\n      if (!presaleIsOver) {\r\n        setPresaleTimeCounter(new Date(presaleEnd * 1000));\r\n      }\r\n    }\r\n\r\n    if (!saleIsOn && !saleIsOver) {\r\n      setSaleTimeCounter(new Date(saleStart * 1000));\r\n    } else {\r\n      //console.log('sale over, or on');\r\n      if (!saleIsOver) {\r\n        setSaleTimeCounter(new Date(saleEnd * 1000));\r\n      }\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handleDiscountMint = async () => {\r\n    console.log('handle discount mint');\r\n    let maxMintable = 0;\r\n\r\n    //mintInfo =  await saleContract.checkDiscountAvailable(address);\r\n\r\n    const userParams = getUserParams();\r\n\r\n    if (!userParams) {\r\n      toast.error('Address not found in the whitelist');\r\n      setShowErrorPopup(true);\r\n      return;\r\n    }\r\n\r\n    const alreadyMintedByWallet = await saleContract\r\n      ._mintedByWallet(address)\r\n      .catch((e) => console.log);\r\n    console.log(alreadyMintedByWallet, ' alreadyMintedByWallet');\r\n    //console.log('minted by wallet',alreadyMintedByWallet);\r\n\r\n    if (alreadyMintedByWallet) {\r\n      maxMintable = userParams.params.max_mint - Number(alreadyMintedByWallet);\r\n    }\r\n\r\n    //console.log('maxMintable', maxMintable);\r\n\r\n    if (maxMintable < 1) {\r\n      toast.error('You have already used up your presale quota.');\r\n      return;\r\n    }\r\n    console.log(maxMintable, ' maxmintable');\r\n    setUserMaxDiscountMintable(Math.min(maxMintPerTransaction,maxMintable));\r\n    // setUserMaxDiscountMintable(maxMintable);\r\n    setCheckoutIsPresale(true);\r\n    setIsCreditCard(false);\r\n    setShowCheckout(true);\r\n  };\r\n  const handleReveal = async () => {\r\n    const reveal = await saleContract\r\n      .Goerli_revealAtCurrentSuppl()\r\n      .catch((e) => console.log('err:', e));\r\n    if (reveal) {\r\n    }\r\n  };\r\n  const handleMint = async () => {\r\n    setApproveInProgress(true);\r\n    console.log('!!!!!!!max tokens per adddres', maxTokenPerAddress);\r\n    const alreadyMintedByWallet = await saleContract\r\n      ._mintedByWallet(address)\r\n      .catch((e) => console.log);\r\n\r\n    if (alreadyMintedByWallet) {\r\n      let maxMintableMainSale =\r\n        maxTokenPerAddress - Number(alreadyMintedByWallet);\r\n\r\n      if (maxMintableMainSale > 0) {\r\n        setMaxMintableDuringMainSale(\r\n          maxMintableMainSale < maxMintPerTransaction\r\n            ? maxMintableMainSale\r\n            : maxMintPerTransaction\r\n        );\r\n\r\n        /* \tif (userIsEcHolder) {\r\n          setUserMaxDiscountMintable(maxMintableMainSale < maxMintPerTransaction ? maxMintableMainSale : maxMintPerTransaction);\r\n        } */\r\n\r\n        //\tsetCheckoutIsPresale(userIsEcHolder);//!!! ec holder hack. it should be false otherwise\r\n        setCheckoutIsPresale(false);\r\n        setIsCreditCard(false);\r\n        setApproveInProgress(false);\r\n        setShowCheckout(true);\r\n      } else {\r\n        setApproveInProgress(false);\r\n        toast.error('You have alredy used up your quota.');\r\n      }\r\n    } else {\r\n      setApproveInProgress(false);\r\n      console.log(\"can't get already minted tokens\");\r\n    }\r\n  };\r\n\r\n  const mintDisco = async (amount, price) => {\r\n    let sc = saleContract.connect(ethersProvider.getSigner());\r\n\r\n    setShowCheckout(false);\r\n\r\n    setApproveInProgress(true);\r\n\r\n    let userParams = getUserParams();\r\n\r\n    if (!userParams) {\r\n      return;\r\n    }\r\n    let tx = null;\r\n\r\n    tx = await sc\r\n      .mint_approved([...userParams.raw_params, userParams.signature], amount, {\r\n        value: amount,\r\n      })\r\n      .catch(handleError);\r\n\r\n    setApproveInProgress(false);\r\n\r\n    if (tx) {\r\n      setTxEtherScan(`${config.ETHERSCAN_URL}/tx/${tx.hash}`);\r\n      setTxInProgress(true);\r\n      let res = await tx.wait().catch((e) => {\r\n        console.log(e, ' errrrrrrrror');\r\n        handleError(e);\r\n        setTxInProgress(false);\r\n      });\r\n\r\n      // let resTwo = await tx.getTransactionHash().catch((e) => {\r\n      //   console.log(e, \" errrrrrrrror\")\r\n      //   handleError(e);\r\n      //   setTxInProgress(false);\r\n      // });\r\n      // let receipt = await resTwo.getReceipt();\r\n      if (res) {\r\n        console.log(res, \" ressss 443\")\r\n        setTxInProgress(false);\r\n        getSaleInfo();\r\n        setActiveTab(2); //-> wallet\r\n      }\r\n\r\n      localStorage.setItem('activeTab', 1);\r\n    }\r\n  };\r\n\r\n  const mintRegular = async (amount) => {\r\n    let sc = saleContract.connect(ethersProvider.getSigner());\r\n\r\n    setShowCheckout(false);\r\n    setApproveInProgress(true);\r\n    const tx = await sc\r\n      .mint(amount, { value: ethers.utils.parseEther(salePrice.toString()) })\r\n      .catch(handleError);\r\n    setApproveInProgress(false);\r\n\r\n    if (tx) {\r\n      setTxEtherScan(`${config.ETHERSCAN_URL}/tx/${tx.hash}`);\r\n      setTxInProgress(true);\r\n      await tx.wait().then(()=>{\r\n        setTxInProgress(false);\r\n        getSaleInfo();\r\n        setActiveTab(2);\r\n      }).catch((e) => {\r\n        handleError(e);\r\n        setTxInProgress(false);\r\n      })\r\n      \r\n      // localStorage.setItem('activeTab', 1);\r\n    }\r\n  };\r\n  const handleError = (e) => {\r\n    console.error(e);\r\n    if (e.error && e.error.message) {\r\n      toast.error(e.error.message);\r\n      console.log(e.error.message);\r\n    } else if (e.message) {\r\n      toast.error(e.message);\r\n      console.log(e.message);\r\n    } else if (e.reason) {\r\n      toast.error(e.reason);\r\n      console.log(e.reason);\r\n    }\r\n  };\r\n  const handleCountingOver = () =>{\r\n    setCountingOver((value)=> value+1)\r\n  }\r\n  return (\r\n    <Box className=\"center-div\" sx={sx.root}>\r\n      {activeTab > 0 && (\r\n        <Banner style={sx.bannerMintedPage} onClick={() => setActiveTab(1)}\r\n         />\r\n      )}\r\n      <Typography\r\n        variant=\"pageTitle\"\r\n        sx={{ ...sx.title, ...(activeTab === 2 && { mt: '-45px' }) }}\r\n      >\r\n        Braves Free Mint\r\n      </Typography>\r\n      {activeTab < 2 && (\r\n        <Typography\r\n          variant=\"pageTitleDescription\"\r\n          sx={{ ...sx.subTitle, marginBottom: '40px', color: '#594569', fontSize: '14px' }}\r\n        >\r\n          BEGIN YOUR JOURNEY INTO BETWIXT\r\n        </Typography>\r\n      )}\r\n\r\n{preSaleFinished && mainSaleFinished && <Success counterDate={date} salesOver/>}\r\n\r\n\r\n      {activeTab < 2 && (\r\n        <>\r\n          {preSaleStarted ? (\r\n            <>\r\n            <Typography variant=\"pageTitleDescription\" sx={sx.subTitle} style={{marginBottom: '10px'}}>\r\n              Whitelist mint:\r\n            </Typography>\r\n            <Typography variant=\"pageTitleDescription\" sx={sx.subTitle} style={{backgroundColor: '#594569', padding: '17px 20px', marginBottom: '40px', width: '140px', marginTop: '15px', fontSize: '18px'}}>\r\n              started\r\n            </Typography>\r\n            </>\r\n          ) : (\r\n            <>\r\n              {!preSaleFinished && (\r\n                <>\r\n                  <Typography\r\n                    variant=\"pageTitleDescription\"\r\n                    sx={sx.subTitle}\r\n                    style={{ marginBottom: 0 }}\r\n                  >\r\n                    Whitelist mint starts in :\r\n                  </Typography>\r\n                  <Counter date={presaleTimeCounter} handleCountingOver={handleCountingOver}/>\r\n                  <br />\r\n                </>\r\n              )}\r\n            </>\r\n          )}\r\n          {mainSaleStarted ? (\r\n            <>\r\n            <Typography variant=\"pageTitleDescription\" sx={sx.subTitle} style={{marginBottom: '10px'}}>\r\n             Public mint: \r\n            </Typography>\r\n             <Typography variant=\"pageTitleDescription\" sx={sx.subTitle} style={{backgroundColor: '#594569', padding: '17px 20px', marginBottom: '40px', width: '140px', marginTop: '15px', fontSize: '18px'}}>\r\n             Sold Out\r\n           </Typography>\r\n           </>\r\n          ) : (\r\n            <Box sx={{ textAlign: 'center' }}>\r\n             {preSaleStarted && !mainSaleFinished && (\r\n                <>\r\n                  <Typography variant=\"pageTitleDescription\" sx={sx.subTitle}>\r\n                  Public mint starts in :\r\n                  </Typography>\r\n                  <Counter date={saleTimeCounter} handleCountingOver={handleCountingOver} />\r\n                </>\r\n              )}\r\n            \r\n\r\n              {!preSaleStarted && !preSaleFinished &&  (\r\n                <Box className=\"pubMintHolder\" sx={sx.pubMintHolder}>\r\n                  <Typography variant=\"pageTitleDescription\" style={{fontSize: '18px'}}>\r\n                  Public mint starts in :\r\n                  </Typography>\r\n                  <Typography variant=\"pageTitleDescription\" style={{color:'#594569', fontWeight: '700', fontSize: '18px'}}> <Counter date={saleTimeCounter}  handleCountingOver={handleCountingOver} simple /></Typography>\r\n                </Box>\r\n              )}\r\n              \r\n            </Box>\r\n          )}\r\n\r\n          {activeTab !== 2 && (preSaleStarted || mainSaleStarted) && (\r\n            <>\r\n              {/* <Button variant=\"grayButton\" onClick={handleOnClick}>\r\n                {buttonText}\r\n              </Button> */}\r\n            </>\r\n          )}\r\n          {/* {!mainSaleStarted && !preSaleStarted && !mainSaleFinished && !preSaleFinished &&\r\n          <>\r\n          <Typography\r\n          variant=\"pageTitleDescription\"\r\n          sx={sx.subTitle}\r\n          style={{ marginBottom: 0 }}\r\n        >\r\n          Mint is not started yet!\r\n        </Typography>\r\n        </>\r\n          } */}\r\n          {/* {showErrorPopup \r\n          &&  <Typography variant=\"pageTitleDescription\" sx={sx.subTitle}>\r\n          userParams error\r\n        </Typography>\r\n          } */}\r\n          <CheckoutModal\r\n            tokenName=\"\"\r\n            isOpen={showCheckout}\r\n            setOpen={() => {\r\n              if (!txInProgress && !approveInProgress) {\r\n                setShowCheckout(false);\r\n              }\r\n            }}\r\n            isPresale={checkoutIsPresale}\r\n            withCreditCard={isCreditCard}\r\n            whitelistLimit={\r\n              checkoutIsPresale\r\n                ? userMaxDiscountMintable\r\n                : maxMintableDuringMainSale\r\n            }\r\n            // salePrice={salePrice}\r\n            salePrice=\"FREE\"\r\n            presalePrice=\"FREE\"\r\n            mintSale={mintRegular}\r\n            mintPresale={mintDisco}\r\n          />\r\n        </>\r\n      )}\r\n      {/*<Typography variant=\"pageTitleDescription\" >PResale </Typography>\r\n      <Counter date={presaleTimeCounter} />\r\n       <Typography variant=\"pageTitleDescription\" >Sale </Typography>\r\n      <Counter date={saleTimeCounter} /> */}\r\n\r\n      {activeTab === 2 && (\r\n        <>\r\n          <Success counterDate={date} image={maskImage} />\r\n        </>\r\n      )}\r\n      {/* {activeTab === 2 && !txInProgress && !approveInProgress && !mainSaleFinished && ! preSaleFinished &&  (\r\n        <>\r\n          <Success counterDate={date} image={maskImage} failed/>\r\n        </>\r\n      )} */}\r\n\r\n      <TxProgressModal isOpen={txInProgress} txEtherScan={txEtherScan} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MintPage;\r\n","import Burn from \"../Views/Burn/Burn\";\r\nimport Home from \"../Views/Home/Home\";\r\nimport MintPage from \"../Views/MintPage/MintPage\";\r\n\r\n\r\n\r\nconst routes = [\r\n  {\r\n    path: \"/\",\r\n    component: <Home/>,\r\n    exact: true,\r\n  },\r\n  // {\r\n  //   path: \"/mint\",\r\n  //   component: <MintPage/>,\r\n  //   exact: true,\r\n  // },\r\n  // {\r\n  //   path: \"/burn\",\r\n  //   component: <Burn/>,\r\n  //   exact: true,\r\n  // },\r\n\r\n];\r\n\r\nexport default routes;\r\n","import { createTheme } from '@mui/material';\r\nconst BP1 = '@media (max-width: 600px)';\r\n\r\nconst COLORS = {\r\n    primaryColor: '#FFFFFF',\r\n    background: '#151019',\r\n    gray: '#363F59',\r\n};\r\n\r\nconst theme = createTheme({\r\n    typography: {\r\n        pageTitle: {\r\n            textAlign: 'center',\r\n            color: COLORS.primaryColor,\r\n            fontFamily: 'Schnyder',\r\n            fontWeight: 300,\r\n            fontSize: '64px',\r\n            lineHeight: '77px',\r\n            [BP1]: {\r\n                fontSize: '42px',\r\n                lineHeight: '53px',\r\n            }\r\n        },\r\n        pageTitleDescription: {\r\n            textAlign: 'center',\r\n            color: COLORS.primaryColor,\r\n            fontFamily: 'Jotia',\r\n            fontSize: '14px',\r\n            lineHeight: '17px',\r\n            textTransform: 'uppercase',\r\n            [BP1]: {\r\n                fontSize: '12px',\r\n                lineHeight: '14px',\r\n            }\r\n        },\r\n        counterNumber: {\r\n            textAlign: 'center',\r\n            color: COLORS.primaryColor,\r\n            fontFamily: 'Jotia',\r\n            fontSize: '32px',\r\n            textTransform: 'uppercase',\r\n            [BP1]: {\r\n                fontSize: '24px',\r\n            }\r\n        },\r\n        boxText: {\r\n            textAlign: 'center',\r\n            color: COLORS.primaryColor,\r\n            fontFamily: 'Jotia',\r\n            fontSize: '24px',\r\n            textTransform: 'uppercase',\r\n            [BP1]: {\r\n                fontSize: '18px',\r\n            } \r\n        },\r\n        share: {\r\n            textAlign: 'center',\r\n            color: COLORS.primaryColor,\r\n            fontFamily: 'Jotia',\r\n            fontSize: '16px',\r\n            textTransform: 'uppercase',\r\n            cursor: 'pointer',\r\n            [BP1]: {\r\n                fontSize: '14px',\r\n            } \r\n        }\r\n    },\r\n    components: {\r\n        MuiButton: {\r\n            styleOverrides: {\r\n                grayButton: {\r\n                    color: COLORS.primaryColor,\r\n                    padding: '18px',\r\n                    fontFamily: 'Jotia',\r\n                    fontSize: '22px',\r\n                    lineHeight: '29px',\r\n                    textTransform: 'uppercase',\r\n                    backgroundColor: COLORS.gray,\r\n                    borderRadius: '4px',\r\n                    maxWidth: '292px',\r\n                    width: '100%',\r\n                    margin: '0 auto',\r\n                    '&:hover': {\r\n                        backgroundColor: COLORS.gray,\r\n                    },\r\n                    [BP1]: {\r\n                        fontSize: '15px',\r\n                        lineHeight: '22px',\r\n                        maxWidth: '220px',\r\n                        padding: '13px',\r\n                    }\r\n                },\r\n                orangeFilledButton: {\r\n\r\n                    padding: '10px 10px',\r\n                    fontFamily: 'poppins-semibold',\r\n                    fontSize: '14px',\r\n                    textTransform: 'uppercase',\r\n                    backgroundColor: '#FF692B',\r\n                    border: '2px solid #FF682B',\r\n                    borderRadius: '4px',\r\n                    maxWidth: '215px',\r\n                    width: '100%',\r\n                    margin: '0 auto',\r\n                    '&:hover': {\r\n                        backgroundColor: '#ff692bcc'\r\n                    }\r\n                }\r\n            }\r\n        },\r\n    },\r\n    palette: {\r\n        primary: {\r\n            main: COLORS.primaryColor,\r\n        },\r\n        background: {\r\n            background: COLORS.background,\r\n            error: {\r\n                main: '#EE1B11',\r\n            },\r\n        }\r\n    },\r\n});\r\n\r\nexport default theme;\r\n","export default __webpack_public_path__ + \"static/media/Galaxis.2ce1e236.svg\";","export default __webpack_public_path__ + \"static/media/CC.85a6dfa4.svg\";","import { Box } from '@mui/system'\r\nimport React from 'react'\r\nimport Typography from '@mui/material/Typography'\r\nimport GalaxisLogo from '../assets/images/logos/Galaxis.svg'\r\nimport CamelCodingLogo from '../assets/images/logos/CC.svg'\r\n\r\nconst BP1 = '@media (max-width: 550px)';\r\nconst BP2 = '@media (max-width: 350px)';\r\nconst sx = {\r\n    root: {\r\n        position: 'relative',\r\n        bottom: 0,\r\n        left: 0,\r\n        right: 0,\r\n        margin: '0 auto 0 auto',\r\n        p: '35px 0',\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        columnGap: '80px',\r\n        rowGap: '15px',\r\n        [BP1]: {\r\n            justifyContent: 'center',\r\n        }\r\n    },\r\n    contentHolder: {\r\n        display: 'flex',\r\n        gap: '5px',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        '& img': {\r\n            maxHeight: '32px',\r\n            height: '100%',\r\n            cursor: 'pointer',\r\n            [BP2]: {\r\n                maxHeight: '28px',\r\n            }\r\n        }\r\n    },\r\n    text: {\r\n        whiteSpace:\"no-wrap\",\r\n        textTransform:\"uppercase\",\r\n        fontFamily: 'Jotia-Regular',\r\n        color: '#FFF',\r\n        fontSize: '12px',\r\n        opacity: '60%',\r\n        [BP2]: {\r\n            fontSize: '10px',\r\n        }\r\n    }\r\n}\r\nconst Footer = () => {\r\n\r\n    const openCC = () => {\r\n        window.open('https://camelcoding.com/', '_blank')\r\n    }\r\n    const openGalaxisWebsite = () => {\r\n        window.open('https://galaxis.xyz', '_blank')\r\n    }\r\n\r\n    return (\r\n        <Box sx={sx.root}>\r\n            <Box sx={sx.contentHolder}>\r\n                <Typography sx={sx.text}>powered by:</Typography>\r\n                <img src={CamelCodingLogo} alt=\"CAMELCODING\" onClick={openCC}/>\r\n            </Box>\r\n\r\n            <Box sx={sx.contentHolder}>\r\n                <Typography sx={sx.text}>blockchain platform by:</Typography>\r\n                <img src={GalaxisLogo} alt=\"GALAXIS\" onClick={openGalaxisWebsite}/>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Footer","import { ThemeProvider } from '@emotion/react';\r\nimport { Box } from '@mui/material';\r\nimport { BrowserRouter, Route, Routes,HashRouter, Router } from 'react-router-dom';\r\nimport './App.css';\r\nimport routes from './routes/routes';\r\nimport theme from './theme/theme';\r\n// import Web3Manager from './Web3Manager.jsx/Web3Manager';\r\nimport { ToastContainer } from 'react-toast';\r\nimport Footer from './components/Footer';\r\nconst sx = {\r\n  root: {\r\n    minHeight: '100vh',\r\n    width: '100%',\r\n    height: '100%',\r\n    position: 'relative',\r\n    display: 'flex',\r\n    flexDirection: 'column'\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n    {/* <Web3Manager> */}\r\n      <HashRouter basename='/'>\r\n        <Box sx={sx.root} color={theme.palette.background} className=\"base-div\">\r\n            <Routes>\r\n              {routes.map(({ path, component, exact }) => (\r\n                <Route key={path} path={path} element={component} exact={exact} />\r\n              ))}\r\n            </Routes>\r\n            <ToastContainer position='bottom-right' delay={4000} className=\"toast\" />\r\n            <Footer />\r\n        </Box>\r\n      </HashRouter>\r\n    {/* </Web3Manager> */}\r\n  </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport { render } from 'react-dom';\r\n\r\nconst root = document.getElementById(\"root\");\r\nrender(<App />, root);\r\n\r\n"],"sourceRoot":""}